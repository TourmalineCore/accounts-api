services:
  accounts-db:
    container_name: 'accounts-db'
    profiles: ['MockForDevelopment', 'MockForPullRequest', 'db-only']
    image: postgres:14.2-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: accounts-db
    ports:
      - 10001:5432
    networks:
      - accounts-network

  accounts-api:
    container_name: 'accounts-api'
    profiles: ['default']
    depends_on:
      - 'accounts-db'
    build:
      dockerfile: Dockerfile
      context: .
    ports:
      - 10002:80

  accounts-api-for-e2e:
    container_name: 'accounts-api-for-e2e'
    profiles: ['MockForPullRequest']
    extends:
      service: accounts-api
    environment:
      - ASPNETCORE_ENVIRONMENT=MockForPullRequest
      - ASPNETCORE_HTTP_PORTS=80
    networks:
      - accounts-network
  
  accounts-api-for-docker-run:
    container_name: 'accounts-api-for-docker-run'
    profiles: ['MockForDevelopment']
    extends:
      service: accounts-api
    environment:
      - ASPNETCORE_ENVIRONMENT=MockForDevelopment
      - ConnectionStrings__DefaultConnection=User ID=postgres;Password=postgres;Host=accounts-db;port=5432;Database=accounts-db
      - HttpUrls__AuthServiceUrl=http://auth-api:80
      - HttpUrls__EmployeeServiceUrl=http://employees-api:80/api
    networks:
      - accounts-network
      - ic-backend-deb

  accountsMockServer:
    container_name: 'accountsMockServer'
    profiles: ['MockForPullRequest']
    image: mockserver/mockserver:5.15.0
    command: -logLevel INFO
    ports:
      - 1080:1080
    volumes:
      - ./initializer.json:/config/initializer.json
    environment:
      MOCKSERVER_INITIALIZATION_JSON_PATH: /config/initializer.json
    networks:
      - accounts-network

networks:
  accounts-network: {}
  ic-backend-deb:
    external: true
